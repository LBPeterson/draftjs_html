module DraftjsHtml
  # This class manages the depth and nesting of the myriad HTML tags generated by DraftjsHtml::ToHtml.
  # It is intended to be a private implementation detail.
  class HtmlDepth # :nodoc:
    BLOCK_TYPE_TO_HTML_WRAPPER = {
      'code-block' => 'pre',
      'ordered-list-item' => 'ol',
      'unordered-list-item' => 'ul',
    }.freeze

    attr_reader :body

    def initialize(body)
      @current_depth = 0
      @body = body
      @previous_parents = [body.parent]
      @nesting_roots = [body.parent.name]
    end

    def apply(block)
      wrapper_tag = BLOCK_TYPE_TO_HTML_WRAPPER[block.type]

      if nesting_root_changed?(wrapper_tag) || depth_changed?(block)
        if deepening?(block)
          deepen(body, wrapper_tag)
        elsif rising?(block)
          rise(body, times: @current_depth - block.depth)
          pop_parent(body) unless wrapper_tag
        elsif wrapper_tag
          push_parent(body, wrapper_tag)
        elsif nested?
          pop_parent(body)
        end

        @current_depth = block.depth
      end
    end

    private

    def deepen(builder, tagname)
      @previous_parents << builder.parent
      @nesting_roots << tagname
      builder.parent = builder.parent.last_element_child
      push_parent(builder, tagname)
    end

    def push_parent(builder, tagname)
      node = create_child(builder, tagname)
      @previous_parents << builder.parent
      builder.parent = node
    end

    def rise(builder, times:)
      times.times do
        begin
          pop_parent(builder)
        end while builder.parent.name != @nesting_roots.last
        @nesting_roots.pop
      end
    end

    def pop_parent(builder)
      builder.parent = @previous_parents.pop if nested?
    end

    def create_child(builder, tagname)
      builder.parent.add_child(builder.doc.create_element(tagname))
    end

    def nested?
      body.parent.name != 'body'
    end

    def depth_changed?(block)
      block.depth != @current_depth
    end

    def nesting_root_changed?(wrapper_tag)
      body.parent.name != wrapper_tag
    end

    def rising?(block)
      @current_depth > block.depth
    end

    def deepening?(block)
      @current_depth < block.depth
    end
  end
end
